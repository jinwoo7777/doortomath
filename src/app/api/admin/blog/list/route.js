import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

// ÏÑúÎπÑÏä§ Ïó≠Ìï† ÌÇ§Î°ú Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÉùÏÑ± (RLS Ïö∞Ìöå)
const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

// ÏùºÎ∞ò ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ (Ïù∏Ï¶ù ÌôïÏù∏Ïö©)
const supabaseAuth = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

export async function GET(request) {
  console.log('=== Í¥ÄÎ¶¨Ïûê Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ Î™©Î°ù Ï°∞Ìöå API ÏãúÏûë ===');
  
  try {
    // Authorization Ìó§ÎçîÏóêÏÑú ÌÜ†ÌÅ∞ Ï∂îÏ∂ú
    const authHeader = request.headers.get('authorization');
    const token = authHeader?.replace('Bearer ', '');
    
    if (!token) {
      console.log('‚ùå Ïù∏Ï¶ù ÌÜ†ÌÅ∞ ÏóÜÏùå');
      return NextResponse.json(
        { error: 'Auth session missing!' },
        { status: 401 }
      );
    }

    console.log('üîç ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù ÌôïÏù∏ Ï§ë...');
    
    // ÌÜ†ÌÅ∞ÏúºÎ°ú ÏÇ¨Ïö©Ïûê ÌôïÏù∏
    const { data: { user }, error: authError } = await supabaseAuth.auth.getUser(token);
    
    if (authError || !user) {
      console.log('‚ùå ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ïã§Ìå®:', authError);
      return NextResponse.json(
        { error: 'Invalid authentication token' },
        { status: 401 }
      );
    }

    console.log('‚úÖ ÏÇ¨Ïö©Ïûê ÌôïÏù∏Îê®:', user.id);

    // ÏÇ¨Ïö©Ïûê Ïó≠Ìï† ÌôïÏù∏
    console.log('üîç ÏÇ¨Ïö©Ïûê Ïó≠Ìï† ÌôïÏù∏ Ï§ë...');
    const { data: profile, error: profileError } = await supabaseAdmin
      .from('profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profileError || !profile) {
      console.log('‚ùå ÌîÑÎ°úÌïÑ Ï°∞Ìöå Ïã§Ìå®:', profileError);
      return NextResponse.json(
        { error: 'User profile not found' },
        { status: 404 }
      );
    }

    if (profile.role !== 'admin') {
      console.log('‚ùå Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÏóÜÏùå:', profile.role);
      return NextResponse.json(
        { error: 'Admin access required' },
        { status: 403 }
      );
    }

    console.log('‚úÖ Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏Îê®');

    // ÏÑúÎπÑÏä§ Ïó≠Ìï†Î°ú Î™®Îì† Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ Ï°∞Ìöå
    console.log('üìã Î™®Îì† Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ Ï°∞Ìöå Ï§ë...');
    const { data: blogPosts, error: fetchError } = await supabaseAdmin
      .from('blog_posts')
      .select(`
        *,
        profiles!blog_posts_author_id_fkey (
          full_name,
          email
        )
      `)
      .neq('status', 'deleted') // ÏÇ≠Ï†úÎêú Ìè¨Ïä§Ìä∏ Ï†úÏô∏
      .order('created_at', { ascending: false });

    if (fetchError) {
      console.error('‚ùå Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ Ï°∞Ìöå Ïã§Ìå®:', fetchError);
      return NextResponse.json(
        { error: 'Failed to fetch blog posts' },
        { status: 500 }
      );
    }

    console.log('‚úÖ Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ Ï°∞Ìöå ÏÑ±Í≥µ:', {
      Ï¥ùÍ∞úÏàò: blogPosts?.length || 0,
      ÏÉÅÌÉúÎ≥ÑÍ∞úÏàò: {
        draft: blogPosts?.filter(p => p.status === 'draft').length || 0,
        published: blogPosts?.filter(p => p.status === 'published').length || 0,
        archived: blogPosts?.filter(p => p.status === 'archived').length || 0
      }
    });

    return NextResponse.json({
      success: true,
      data: blogPosts || []
    });

  } catch (error) {
    console.error('‚ùå API Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
} 